
React로 개발을 하다보면 항상 생각하는 부분은 컴포넌트를 나누는 기준이다. 
우리는 컴포넌트를 뷰를 추상화 하는것으로 사용한다.
공통적인것들끼리 묶어서 이름을 작성하고, 재사용할수있는 그런것이다.

그래서 우리는 추상화하기 위해 어떤식으로 나눠야할지? 그런것들을 고민해봐야한다. 

에시로 현재 진행하고 있는 Assemble의 모임 생성과 모임 수정을 보겠다. 

모임 생성 => (카테고리, 인원수, 총 진행 예정 달, 모임 이름, 모임 설명) - 5개
모임 수정 => (카테고리, 인원수, 총 진행 예정 달, 모임 이름, 모임 설명, 모집 진행 여부) - 6개

글로 작성하는것이여서 좀 이해하기 힘들수는 있지만
현재 위에를 보면 모집 생성과 모집 수정은 모집 진행 여부를 추가한것 빼고는 다 공통적인 값을 가지고 디자인 또한 동일하다. 

❗️❗️하지만 여기서 모임 수정에서 모임원 직급 수정 혹은 외부인원 열람 여부 등의 값이 추가 된다고 생각해 보자 
그러면 
모임 생성 => (카테고리, 인원수, 총 진행 예정 달, 모임 이름, 모임 설명) - 5개
모임 수정 => (카테고리, 인원수, 총 진행 예정 달, 모임 이름, 모임 설명, ❗️모집 진행 여부,❗️모임원 직급 수정,❗️외부 열람 여부) - 8개

위와 같이 수정에서만 요구사항이 추가된다면? 
하나의 컴포넌트로 추상화를 했기때문에 추가 요구사항이 들어올수록 공통된 컴포넌트로 재사용을 위한 컴포넌트를 추상화 한것이 
나중에는 공통점보다 차이점이 더 많아서 나 또한 바로 알아볼수없는? 그런 복잡한 컴포넌트가 될수있다. 

그래서 생각한것은 이런 경우에는 UI를 기준으로 컴포넌트 추상화가 아닌 비즈니스 로직 추상화를 봐야한다고 생각합니다.

하지만 이것의 단점은 비슷한 UI를 재사용하지 못할수도있다. 
비슷한 UI를 따로 컴포넌트로 분리를 해서 사용할수도 있습니다. 

그래서 저는 WET (Write Everything Twice)방법론 처럼 바로 해결하지 못한는 상황은 두번 작성후 공통으로 추출할수있는 곳을 추출해 
최종으로는 DRY원칙을 사용하여 개발을 진행하였습니다. 

이유는 개발 초기 효율을 UP하고 추후 리팩토링을 진행하면서 유지보수성을 확보하는 방법을 선택하였습니다.

WET이란
1. 중복 코드 : WET방법론은 비슷한 로직을 여러번 작성하는 상황을 지칭합니다. 이는 유지보수성을 감소시키고 코드의 양을 늘립니다.
2. 개발자는 편안합니다: 새로운 기능을 추가할 때마다 기존 코드를 복사해서 수정하는 방식을 선호하는 상황을 나타낼수있습니다. 또한 재사용 추상화를 하는것보다는 빠른 속도를 낼수있습니다. 
3. 대신 코드의 양도 많아져 유지보수에 힘들수있습니다. 

이것의 반대로는 DRY(Don't Repeat Yourself)

DRY원칙은 같은 코드나 로직을 중복해서 작성하지 말아야 한다는것이다. 
그 이유는 중복된 코드는 유지보수성을 저하시키고 버그가 발생할 가능성이 높다. 
모듈화된 코드를 통해 생산성과 유지보수성을 높일수있다. 
