프로젝트를 진행하면서 Refresh Token에 문제가 Cookie, 
Cookie 정책 상 samesite라는 정책이 있거든요.
문제 백엔드는 https, 프론트엔드는 배포를 하지 않은 로컬 환경이여서 http상태였다.

프론트엔드 : http://localhost:3000
백엔드 : https://~~~

이러면 둘은 Samesite가 다르기 때문에 서버에서 쿠리를 심어서 보내도 브라우저에 안심어지는 현상이 있다.
이럴 경우에는 로컬환경에서 samesite환경을 만들어줘서 통신이 가능하다.

이럴때는 프론트엔드가 배포를 진행하여 https상태로 같이 하는것이 편한 방법이다.
하지만 로컬로 관리를 하는경우에는 어떤식으로 진행을 할것인가?

SameSite쿠키
SameSite쿠키는 앞서 언급한 서드 파티 쿠키의 보안적 문제를 해결하기 위해 만들어진 기술입니다.
크로스 사이트(Cross-site)로 전송하는 요청의 경우 쿠키의 전송에 제한을 두도록 합니다.

None, Lax, Strict 세가지 종류를 선택할 수 있고, 각각 동작하는 방식이 다름

None: Samesite가 탄생하기 전 쿠키와 동작하는 방식이 같다, none상태이면 쿠키의 경우 크로스 사이트 요청이 가능하다. 즉, 서드 파티 쿠키도 전송됩니다.
보안적으로도 Samesite 적용을 하지 않은 쿠키와 마찬가지로 문제가 있는 방식입니다.
** Samesite:None 일때는 https 상태여야 한다는 점이다. 또한 Secure 속성을 필수로 추가해야한다는 점
** ex) samesite=none, secure=true **

Strict: 가장 보수적은 정책 크로스사이트 요청에는 항상 전송되지 않습니다. 즉. 서드 파티 쿠키는 전송되지 않고, 퍼스트 파티 쿠키만 전송됩니다.

Lax: Strict에 비해 상대적이지만 느슨한 정책, Lax로 설정된 경우, 대체로 서드 파티 쿠키는 전송되지 않지만 몇가지 예외적인 요청에는 전송됩니다.

Secure 필수 정책!
Samesite 속성으로 None을 사용하려면 반드시 해당 쿠리는 Secure쿠키여야 합니다.
Secure쿠키는 HTTPS가 적용된 요청에만 전송되는 쿠키입니다. 이 정책을 구현하는 브라우저도 현재로서는 크롬밖에 없습니다.

---------------------------------------------------------------------------------------------------

AWS S3
저장소다
파일도 S3