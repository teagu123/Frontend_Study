jwt토큰이란?
jwt 토큰에 대해서 알아야할 필요가 있다.

여기서 accessToken과 refreshToken이 존재한다.
우리는 보안을 위해서 accessToken의 만료시간을 짧게 하고, refreshToken도 발급하여 만약 accessToken이 탈취된다고 하더라도
만료시간이 짧기 때문에 안전하게 인증이 가능하다는 점이 있다.

그래서 우리는 accessToken을 예를 들어 한시간으로 잡았다고 하자
사용자가 우리의 사이트를 사용할때 한시간마다 accessToken이 만료한다고 로그아웃을 시키는것은 불편함을 준다.
그래서 사용하는것이 refreshToken을 사용하여 accessToken을 재발급하는것이다.

interceptor를 사용
우리는 axios를 통신하는데 http통신 라이브러리에는 interceptor가 존재한다.
interceptor은 api요청에서 then이나 catch로 처리되기 전에 응답을 가로챌 수 있도록 하는것이다.

일단 우리는 토큰 만료는 401에러로 진행하였음 accessTotken 해당시간이 지나면 401에러를 준다.
- api를 보낼때 가로채는거 -----> axios.interceptors.request 
- api응답을 받을때 가로채는거 -> axios.interceptor.response

그리고 응답이 올때 사용하는것이므로 use를 추가로 작성해 활용한다. 
--------------------------------------------------------------------------------------------------------

Front-end에서 토큰을 어디에 저장해야 할까?

AccessToken은 보통 짧은 수명 주기를 가지고있음. 

이걸 어디다가 저장해야할까?

LocalStorage
- 장점 : 편리하다.
LocalStorage는 편리하다. 

- 단점 : XSS 공격에 취약하다.
XSS공격은 당신의 웹사이트에서 공격자가 js를 실행할수 있을때 발생한다.
LocalStorage에 저장되어잇으면 accessToken을 공격자가 탈취할 수 있다는 말이다.

Cookies
- 장점 : 쿠키는 js로 접근 불가. 그래서 LocalStorage와는 다르게 XSS 공격에 취약하지 않다.
만약 공격자가 js를 당신의 사이트에서 실행한다고 했을때, Cookie의 httponly나 secure옵션을 사용한다며 당신의 쿠키는 js 접근에 안전해진다. 

